(my-flatten '(a (b (c d) e)))
(define (my-flatten l) (cond ((null? l) '()) ((pair? l) (append (my-flatten (car l)) (my-flatten (cdr l)))) (else (list l))))

(repli '(a b c) 3)

(define (repli l x) (if (null? l) '() (append (repli2 x (car l)) (repli (cdr l) x))))
(define (repli2 n x) (if (= 0 n) '() (cons x (repli2 (- n 1) x))))

(range 4 9)

(define (range x y) (if (> x y) '() (cons x (range (+ x 1) y))))

(remove-at '(a b c d) 2)
(a c d)

(define (remove-at l n) (if (= n 1) (cdr l) (cons (car l) (remove-at (cdr l) (- n 1))))) 

(insert-at 'alfa '(a b c d) 2)
(a alfa b c d) 2

(define (insert-at x l n) (if (= n 1) (cons x l) (cons (car l) (insert-at x (cdr l) (- n 1))))) 

(rnd-select '(a b c d e f g h) 3)
(e d a)

(define (rnd-select l n) (let ((x (+(random (length l)) 1))) (if (= n 0) '() (cons (list-ref l (- x 1)) (rnd-select (remove-at l x) (- n 1))) )))
(define (remove-at l n) (if (= n 1) (cdr l) (cons (car l) (remove-at (cdr l) (- n 1)))))

* (rnd-permu '(a b c d e f))
(b a d c e f)

(define (rnd-permu l) (if (= 0 (length l)) '() (let ((x (+ (random (length l)) 1))) (cons (list-ref l (- x 1)) (rnd-permu (remove-at l x))) )))
(define (remove-at l n) (if (= n 1) (cdr l) (cons (car l) (remove-at (cdr l) (- n 1)))))